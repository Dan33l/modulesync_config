#!/usr/bin/ruby

require 'json'
require 'open-uri'
require 'yaml'

# we removed the following modules from our modulesync_config / hide it because they are not Puppet modules but match the puppet- pattern
# The modules in the list are broken, unfinished or got migrated (yes, that really happens from time to time)
# ToDo: extend this list with repos that are archived on github
# ToDo: Archive repos that we migrate away
LEGACY_OR_BROKEN_NOBODY_KNOWS = ['puppet-bacula', 'puppet-nagios_providers', 'puppet-iis', 'puppet-syntax', 'puppet-blacksmith', 'puppet-mode']

# get all modules we own from github
# use poor mans pagination solution
puts "get data from the github API"
github_data1 = JSON.load(open('https://api.github.com/orgs/voxpupuli/repos?per_page=100&page=1'))
github_data2 = JSON.load(open('https://api.github.com/orgs/voxpupuli/repos?per_page=100&page=2'))
repos = github_data1.map{|repo| repo['name']} + github_data2.map{|repo| repo['name']}
repos = repos.select{|repo| repo =~ /^puppet-/}.reject{|repo| repo =~ /^puppet-lint/}
repos -= LEGACY_OR_BROKEN_NOBODY_KNOWS

# get all managed modules from our modulesync_config
puts "get all manged modules"
modulesync_repos = YAML.load(File.read('managed_modules.yml'))

# get all modules that we have on github but are currently not managed by modulesync_config
not_synced_repos = repos.select{|repo| !modulesync_repos.include?(repo)}

# get all forge releases
puts "get data from the forge API"
forge_response = JSON.load(open('https://forgeapi.puppetlabs.com:443/v3/modules?owner=puppet&limit=200'))
forge_releases = forge_response['results'].map{|release| release['slug']}

# get all modules that are in modulesync_config but not released
unreleased_modules = modulesync_repos.reject{|repo| forge_releases.include?(repo)}

# get all modules we own but are unreleased
really_unreleased_modules = repos.reject{|repo| forge_releases.include?(repo)}

# get all modules that require a modulesync
really_need_an_initial_modulesync = not_synced_repos.reject{|repo| LEGACY_OR_BROKEN_NOBODY_KNOWS.include?(repo)}

# get all modules that really need an initial release
really_need_an_inital_release = really_unreleased_modules.reject{|repo| LEGACY_OR_BROKEN_NOBODY_KNOWS.include?(repo)}

# update git and get the latest release
`git fetch --all --prune`
tags = `git tag -l`
latest_release  = tags.lines.last.strip

# get the current modulesync version for all repos
modules_that_were_added_but_never_synced = []
versions = modulesync_repos.each do |repo|
  begin
    response = open("https://raw.githubusercontent.com/voxpupuli/#{repo}/master/.msync.yml")
  rescue OpenURI::HTTPError
    puts "something is fucked up with #{repo} and https://raw.githubusercontent.com/voxpupuli/#{repo}/master/.msync.yml"
    modules_that_were_added_but_never_synced << repo
    next
  end
  sync = YAML.load(response)
  version = sync['modulesync_config_version']
  { repo => version }
end

# get all repos that are on an outdated version of modulesync_config
need_another_sync = versions.each do |repo, version|
  repo if Gem::Version.new(latest_release) >= Gem::Version.new(version)
end

# generate some output
puts '=============================================================================================================================================================='
puts "We got #{repos.count} modules in our github org"
puts "We got #{modulesync_repos.count} in our modulesync config"
puts "We released #{forge_releases.count} modules to forge.puppet.com"
puts '=============================================================================================================================================================='
puts "The following modules are missing in our modulesync config: #{not_synced_repos.join(', ')}"
puts "The following modules are in modulesync config but not released to the forge: #{unreleased_modules.join(', ')}"
puts "The following modules are in our github org but unreleased: #{really_unreleased_modules.join(', ')}"
puts "the following modules got added to our modulesync config but were never synced: #{modules_that_were_added_but_never_synced.join(', ')}"
puts '=============================================================================================================================================================='
puts "We don't care about #{LEGACY_OR_BROKEN_NOBODY_KNOWS.join(', ')}"
puts '=============================================================================================================================================================='
puts "We need to do an initial modulesync on: #{really_need_an_initial_modulesync.join(', ')}" if really_need_an_initial_modulesync.count > 0
puts "we need to do a normal modulesync on: #{need_another_sync.join(', ')}"
puts "Afterwars we really need to release: #{really_need_an_inital_release.join(', ')}"
puts '=============================================================================================================================================================='
